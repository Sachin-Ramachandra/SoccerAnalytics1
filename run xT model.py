import os
import tqdm
import pandas as pd
import numpy as np

import socceraction.spadl as spadl
import socceraction.vaep.features as fs
import socceraction.xthreat as xthreat

# configuring, file and folders to use SPADL_data
datafolder = "../data-fifa"
spadl_h5 = os.path.join(datafolder, "spadl-statsbomb.h5")
xT_h5 = os.path.join(datafolder, "xT.h5")
games = pd.read_hdf(spadl_h5, "games")
print("nb of games: ", len(games))

# read all actions in the game
A = []

for game in tqdm.tqdm(list(games.itertuples())):
    actions = pd.read_hdf(spadl_h5, f"actions/game_{game.game_id}")
    actions = spadl.play_left_to_right(actions, game.home_team_id)
    actions = spadl.add_names(actions)
    A.append(actions)

A = pd.concat(A)

# loading pre-trained model/ xT data that Karun has made public
import ssl

ssl._create_default_https_context = ssl._create_unverified_context

url_grid = "https://karun.in/blog/data/open_xt_12x8_v1.json"
xT_model = xthreat.load_model(url_grid)

# training a custom model
xTModel = xthreat.ExpectedThreat(l=16, w=12)
xTModel.fit(A);

# xT model should only be used to value actions which moves the ball and keep possesion of the ball
mov_actions = xthreat.get_successful_move_actions(A)
mov_actions["xT_value"] = xTModel.predict(mov_actions)
mov_actions[["type_name", "start_x", "start_y", "end_x", "end_y", "xT_value"]][:10]

# inspecting the xT model
import matplotsoccer as mps

# inspecting the heatmap
mps.heatmap(xTModel.xT, cmap="hot", linecolor="white", cbar="True")
# Inspecting the interpolated heatmap used for predictions
interp = xTModel.interpolator()
x = np.linspace(0, 105, 1050)
y = np.linspace(0, 68, 680)
mps.heatmap(interp(x, y), cmap="hot", linecolor="white", cbar="True")

# visualsing the xT model
import matplotlib.pyplot as plt

a = mov_actions

# scatter plot of actions colored based on the values generated by xT model
mps.field(show=False)
plt.scatter(a.start_x, a.start_y, c=a.xT_value, cmap="bwr_r")
plt.colorbar()
plt.show()

# scatter plot of actions with high xT values
a = a.sort_values("xT_value", ascending=True)
mps.field(show=False)
plt.scatter(a.start_x, a.start_y, c=a.xT_value, cmap="bwr_r")
plt.colorbar()
plt.show()

# scatter plot of actions with low xT values
a = a.sort_values("xT_value", ascending=False)
mps.field(show=False)
plt.scatter(a.start_x, a.start_y, c=a.xT_value, cmap="bwr_r")
plt.colorbar()
plt.show()